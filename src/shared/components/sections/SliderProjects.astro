---
import { getI18N } from "@/shared/i18n";
import "photoswipe/style.css";
import Section from "@/shared/components/Section.astro";
import Button from "@/shared/components/Button.astro";

interface Props {
  id: string;
  heading?: string;
  subheading?: string;
  offset?: number;
  photos: Photo[];
  loadMoreText?: string;
  path: string;
  language: string;
  urlButton?: string;
  urlText?: string;
}

const {
  heading,
  subheading,
  photos = [],
  offset=12,
  path = "",
  loadMoreText,
  language,
  urlButton,
  urlText,
} = Astro.props;

const i18n = getI18N({ language });
---

<Section heading={heading} subheading={subheading}>
 
  <div class=" scroller ">
   
  <ul class=" tag-list scroller_inner items-center ">
    
        {photos.slice(0,offset).map(({ src, width, height, alt }: Photo) => (
          
            <li>
            <span
              class="group rounded-xl hover:scale-105 hover:contrast-[110%] transition-all relative"
              href={`/${path}/${src}`}
              target="_blank"
              data-cropped="true"
              data-pswp-width={width}
              data-pswp-height={height}
            >
              <img
                class="rounded-xl object-cover h-auto"
                loading="lazy"
                src={`/${path}/thumbnails/${src}`}
                alt={alt}
                width="397"
                height="264"
              />
       
              <span class="absolute bottom-0 left-0 p-4 text-white ">
                {alt}
              </span>
            </span> </li>
          
        ))} </ul> 
      
    
  </div> 

  {urlButton && urlText ? (
    <div class="text-center mx-auto">
      <Button url={urlButton} target="_self" title={i18n.PAGES.HOME.PROJECTS_SECTION.URL.TITLE}>
        {urlText}
      </Button>
    </div>
  ) : null}
  
</Section>

<script type="module">
  document.addEventListener('astro:page-load', () => {
    
    const scroller = document.querySelector(".scroller");

    function addAnimation() {
      scroller.setAttribute("data-animated", true)
      const scrollerInner = scroller.querySelector(".scroller_inner")
      const scrollerContent = Array.from(scrollerInner.children)
  
      scrollerContent.forEach((item) => {
        const clone = item.cloneNode(true)
        clone.setAttribute("aria-hidden", true)
        scrollerInner.appendChild(clone)
      })
    }
  
    if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {

      addAnimation()
    }
  })
  
</script>

<style>

.tag-list {
  list-style: none;
  padding-inline: 0;
}
.tag-list li {
  padding: 1rem;
  background: current;
  position: relative;
  white-space: nowrap;
  margin: auto;
  
}

.scroller {
  max-width: calc(100% - 1px);
}

.scroller_inner {
  padding-block: 1rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1rem
}

.scroller[data-animated="true"] {
  overflow: hidden;
  /* mask: linear-gradient(to right, transparent, currentColor 50px, currentColor calc(100% - 50px), transparent); */
  -webkit-mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
  mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
}

.scroller[data-animated="true"] .scroller_inner {
  width: max-content;
  flex-wrap: nowrap;
  animation: scroll 120s linear infinite;
  animation-delay: 3s;
}

@keyframes scroll {
  to {
    transform: translate(calc(-50% - .5rem));
  }
}


</style>

