---
import { getI18N } from "@/shared/i18n";
import Section from "@/shared/components/Section.astro";
import RotateCircle from "@/shared/components/RotateCircle.astro";

const { language } = Astro.props
const i18n = getI18N({ language })

const points = [
  {
    number: 1,
    name: i18n.PROCESS.POINT_1.TITLE,
    subtitle: i18n.PROCESS.POINT_1.SUBTITLE,
    icon: "icon",
    color: "#ffc71a",
    transform: "translate(-50%, -100%)",
  },
  {
    number: 2,
    name: i18n.PROCESS.POINT_2.TITLE,
    subtitle: i18n.PROCESS.POINT_2.SUBTITLE,
    icon: "icon",
    color: "#ff9f1a",
    transform: "translate(0, -50%)",
  },
  {
    number: 3,
    name: i18n.PROCESS.POINT_3.TITLE,
    subtitle: i18n.PROCESS.POINT_3.SUBTITLE,
    icon: "icon",
    color: "#60a1db",
    transform: "translate(0%, -50%)",
  },
  {
    number: 4,
    name: i18n.PROCESS.POINT_4.TITLE,
    subtitle: i18n.PROCESS.POINT_4.SUBTITLE,
    icon: "icon",
    color: "#892dab",
    transform: "translate(0, -50%)",
  },
  {
    number: 5,
    name: i18n.PROCESS.POINT_5.TITLE,
    subtitle: i18n.PROCESS.POINT_5.SUBTITLE,
    icon: "icon",
    color: "#7f4afe",
    transform: "translate(-50%, 0)",
  },
  {
    number: 6,
    name: i18n.PROCESS.POINT_6.TITLE,
    subtitle: i18n.PROCESS.POINT_6.SUBTITLE,
    icon: "icon",
    color: "#8984f7",
    transform: "translate(-100%, -50%)",
  },
  {
    number: 7,
    name: i18n.PROCESS.POINT_7.TITLE,
    subtitle: i18n.PROCESS.POINT_7.SUBTITLE,
    icon: "icon",
    color: "#60b9db",
    transform: "translate(-100%, -50%)",
  },
  {
    number: 8,
    name: i18n.PROCESS.POINT_8.TITLE,
    subtitle: i18n.PROCESS.POINT_8.SUBTITLE,
    icon: "icon",
    color: "#60dbbe",
    transform: "translate(-100%, -50%)",
  },
];

let selected = points[0];
const circleDiameter = 350; // Diámetro del círculo
const circleRadius = circleDiameter / 2; // Radio del círculo
const centerX = circleDiameter / 2; // Centro X del círculo
const centerY = circleDiameter / 2; // Centro Y del círculo
const lineLength = 50; // Longitud de las líneas
---

<Section>
  <h2
    class="mx-auto mb-24 text-center text-3xl lg:text-6xl text-balance font-semibold tracking-wide"
  >
    {i18n.PROCESS.HEADING}
  </h2>
  <div class="flex items-center justify-center h-[400px] lg:h-[600px] relative">
    <img
      src="/logo-portico-sport-circular-white.svg"
      alt="Portico Sport"
      width="130"
      height="130"
      class="absolute hidden lg:block"
    />
    <div class="flex flex-col gap-2 absolute text-center w-40 lg:hidden p-4">
      <span
        style={{
          color: selected.color,
        }}
        class="number-color font-bold"
      >
        {selected.number}
      </span>
      <span
        class="name text-sm text-balance"
      >
        {selected.name}
      </span>
    </div>
    <RotateCircle class="w-[350px] h-[350px] absolute" />
    <div
      class="reference-circle absolute w-[350px] h-[350px] border-dashed border rounded-full"
    >
    </div>
    <div class="relative w-[350px] h-[350px] rounded-full">
      {
        points.map(({ number, color, name, transform, subtitle }, i) => {
          const angle = (i / points.length - 0.25) * (2 * Math.PI); // Ajuste del ángulo inicial
          const xPos = centerX + circleRadius * Math.cos(angle);
          const yPos = centerY + circleRadius * Math.sin(angle);
          // Calcula el ángulo de rotación para que la línea sea perpendicular al círculo
          const rotationAngle = angle + Math.PI / 2;

          // Calcula las coordenadas del punto final de la línea (extendiendo la línea hacia afuera)
          const endX = centerX + (circleRadius + lineLength) * Math.cos(angle);
          const endY = centerY + (circleRadius + lineLength) * Math.sin(angle);

          return (
            <>
              <div
                style={`background-color: ${color}; left: ${xPos}px; top: ${yPos}px;`}
                class="point hidden lg:block w-4 h-4 rounded-full absolute -translate-x-1/2 -translate-y-1/2 pointer z-10"
              />
              <button
                data-color={color}
                data-point={number}
                style={`background-color: ${color}; left: ${xPos}px; top: ${yPos}px;`}
                class="button-point lg:hidden w-8 h-8 rounded-full absolute -translate-x-1/2 -translate-y-1/2 pointer z-10"
              >
                <span class="flex w-full h-full justify-center items-center font-bold lg:hidden">
                  {number}
                </span>
              </button>
              <div
                class="line absolute w-[2px] origin-top-left"
                style={{
                  height: `${lineLength}px`,
                  backgroundColor: color,
                  left: `${xPos}px`,
                  top: `${yPos}px`,
                  transform: `rotate(${
                    (rotationAngle * 180) / Math.PI + 180
                  }deg)`,
                }}
              />
              <div
                class="arm box absolute w-[300px] h-auto rounded-lg px-3 py-2 z-10 border-[3px] border-solid flex flex-col gap-2"
                style={{
                  borderColor: color,
                  left: `${endX}px`,
                  top: `${endY}px`,
                  transform,
                }}
              >
                <h3 class="text-center text-balance font-bold text-sm flex justify-center gap-2 items-center">
                  <span
                    class="text-xl"
                    style={{
                      color,
                    }}
                  >
                    {number}.
                  </span>{" "}
                  <span class={`name-${number}`}>{name}</span>
                </h3>
                <p class={`subtitle text-xs text-gray-300 text-pretty subtitle-${number}`}>
                  {subtitle}
                </p>
              </div>
            </>
          );
        })
      }
    </div>
  </div>
  <span class="process-subtitle text-center block lg:hidden py-4 text-pretty">
    {selected.subtitle}
  </span>
</Section>
<style>
  .button-point::after, .point::after {
    content: "";
    width: 1rem;
    height: 1rem;
    transform: translate(-50%, -50%) scale(1);
    border-radius: 50%;
    position: absolute;
    cursor: pointer;
    border: 1px solid #c8ced1;
    transform-origin: center;
    left: 50%;
    top: 50%;
    animation-name: pulse;
    animation-duration: 3s;
    animation-iteration-count: infinite;
  }

  .box:hover .subtitle {
    display: block;
  }

  .box .subtitle {
    display: none;
  }

  @media (max-width: 1023px) {
    .arm,
    .line {
      display: none;
    }

    .button-point::after, .point::after {
      width: 1.8rem;
      height: 1.8rem;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .line {
      transition: height 0.2s ease-in-out;
    }

    @keyframes pulse {
      0% {
        transform: translate(-50%, -50%) scale(1);
      }
      50% {
        transform: translate(-50%, -50%) scale(2);
      }
      100% {
        transform: translate(-50%, -50%) scale(1);
      }
    }
  }
</style>
<script is:inline>
  document.querySelectorAll('.button-point').forEach((button) => {
    button.addEventListener('click', (e) => {
      const target = e.target.closest('.button-point');
      const number = target.getAttribute('data-point');
      const color = target.getAttribute('data-color');
      const name = document.querySelector(`.name-${number}`).textContent;
      const subtitle = document.querySelector(`.subtitle-${number}`).textContent;
      document.querySelector('.number-color').style.color = color;
      document.querySelector('.number-color').textContent = number;
      document.querySelector('.name').textContent = name;      
      document.querySelector('.process-subtitle').textContent = subtitle;
    })
  })
</script>
