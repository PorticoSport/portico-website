---
import Button from "./Button.astro";
import ContactForm from "@/shared/components/forms/ContactForm.astro";
import Typography from "@/shared/components/ui/Typography.astro"

interface Props {
  showContactForm?: boolean;
  language: string;
  video: string;
  subtitle?: string;
  title?: string;
  slogan?: string;
  titleH3?: string;
  buttonUrl?: string;
  buttonText?: string;
  classVideo?: string;
  subject?: string;
  uk?: boolean;
  titleCanopie?:string;
  subtitleCanopie?:string;
  descriptionCanopie?:string;
  subsubtitleCanopie?:string;
  pretitleCanopie?:string;
}

const { video, classVideo, subtitle, title, titleH3, titleCanopie, subtitleCanopie, subsubtitleCanopie, descriptionCanopie, pretitleCanopie, slogan, buttonUrl, buttonText, language, showContactForm, subject, uk } = Astro.props;

function getTipeFromVideo() {
  const videoExtension = video.split(".").pop();
  if (videoExtension === "mp4") {
    return "video/mp4";
  }
  if (videoExtension === "webm") {
    return "video/webm";
  }
  return "video/mp4";
}

const type = getTipeFromVideo();
---

<div
  class="relative h-[105dvh] w-full max-w-[100vw] md:aspect-video"
>
  <div
    class="absolute inset-0 h-full z-10 m-auto flex flex-col items-center w-full"
  >
    <slot>
      <section
        class="absolute z-20 animate-fade-up flex justify-center gap-8 flex-col pt-20 lg:flex-row max-w-[1400px] mx-auto px-4"
      >
        <div class="text-center pt-20 flex flex-col gap-4">
          {
            subtitle && (<Typography tag="p" className="subtitle text-center px-4 mb-0" text={subtitle} responsive size="large" className="font-bold" />)
          }
          {
            title && (<Typography tag="h1" className="items-center gap-5 lg:gap-20 px-4 text-center" text={title} responsive />)
          }
          {
            slogan && (<Typography tag="p" className="items-center gap-5 lg:gap-20 px-4 text-center" text={slogan} responsive />)
          }
          {
            titleH3 && (<Typography tag="h3" className="items-center gap-5 lg:gap-20 px-4 text-center" text={titleH3} responsive />)
          }
{
          pretitleCanopie && (<Typography tag="p"text={pretitleCanopie} responsive />)
        }
        {
            titleCanopie && (<Typography tag="h1" className="uppercase mb-6 font-bold" text={titleCanopie} responsive />)
          }
         {
            subtitleCanopie && (<Typography tag="p" type="secondary" className="mb-6 text-xl" text={subtitleCanopie} responsive size="large" className="font-bold" />)
          }
          {
            subsubtitleCanopie && (<Typography tag="p" type="primary" className="mb-6 font-thin text-xl"text={subsubtitleCanopie} responsive />)
          }
          {
            descriptionCanopie && (<Typography tag="p" className="max-w-[60ch]"  text={descriptionCanopie} responsive />)
          }
          {
            buttonUrl && buttonText ? (
              <Button
                target="_self"
                class="animate-fade-up block lg:hidden mx-auto mt-10"
                url={buttonUrl}
              >
                {buttonText}
              </Button>
            ) : null
          }
        </div>
        {
          showContactForm && subject && (
            <div class="p-4 bg-black/50 rounded-xl hidden lg:block">
              <ContactForm uk={uk} size="mini" language={language} hiddenSubject={true} subject={subject} />
            </div>
          )
        }
      </section>
    </slot>

    <video
      autoplay
      loop
      muted
      playsinline
      id="main-video"
      preload="none"
      class={`video cp-v h-full w-full object-cover object-top animate-duration-[2s] animate-ease-in-out brightness-50 ${classVideo}`}
    >
      <source data-src={video} type={type} />
    </video>
  </div>
  <video
    class="video absolute -bottom-48 -z-40 blur-3xl animate-duration-[2s] animate-ease-in-out brightness-50"
    autoplay
    loop
    muted
    preload="none"
  >
    <source data-src={video} type={type} />
  </video>
  <slot name="bottom" />
</div>

<script>
  

  document.addEventListener("astro:page-load", function() {
 let lazyVideos = document.querySelectorAll(".video")

 if ("IntersectionObserver" in window) {
   let lazyVideoObserver = new IntersectionObserver(function(entries) {
     entries.forEach(function(video) {
       if (video.isIntersecting) {
         for (const source in Array.from(video.target.children)) {
          const sourceElements = Array.from(video.target.children).filter(child => child.tagName === "SOURCE");

           sourceElements.forEach(videoSource  => {
            videoSource.src = videoSource.dataset.src; 
          });
         }

         video.target.load();
         video.target.classList.remove("video");
         lazyVideoObserver.unobserve(video.target);
       }
     });
   });

   lazyVideos.forEach(function(lazyVideo) {
     lazyVideoObserver.observe(lazyVideo);
   });
 }
});
</script>

<style>

  .subtitle {
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  }
</style>
