---
import LogoCircles from "@/shared/components/LogoCircles.astro";
import { type Photo } from '@/types/types'

interface Props {
  images: Photo[];
}

const { images } = Astro.props
---
<images-carousel class="wrapper w-full">
  <ul class="carousel list-none">
    {
      images.map((image , index) => {
        return (
          <li class="rounded-xl aspect-video border-primary border overflow-hidden ">
            <img src={image.src} alt={image.imgAlt} draggable="false" />
          </li>
        )
      })
    }
  </ul>
  <div class="flex justify-center items-center w-full gap-6 p-4">
    <button class="w-10 h-10 flex justify-center items-center rounded-full back">
      <LogoCircles className="w-[90%]">
        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-left" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg>
      </LogoCircles>
    </button>
    <button class="w-10 h-10 flex justify-center items-center rounded-full next">
      <LogoCircles className="w-[90%]">
        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-right" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>
      </LogoCircles>
    </button>
  </div>
</images-carousel>

<style>
  .carousel {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: calc((100% / 3) - 1rem);
    gap: 1rem;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    scrollbar-width: 0;
  }

  .carousel.dragging {
    cursor: grabbing;
    user-select: none;
    scroll-snap-type: none;
    scroll-behavior: auto;
  }

  .carousel.no-transition {
    scroll-behavior: auto;
  }

  .carousel::-webkit-scrollbar {
    display: none;
  }

  .carousel li {
    scroll-snap-align: start;
  }

  @media (max-width: 1024px) {
    .carousel {
      grid-auto-columns: calc((100% / 2) - 1rem);
    }
  }

  @media (max-width: 768px) {
    .carousel {
      grid-auto-columns: calc(100% - 1rem);
    }
  }
</style>

<script>
  class ImagesCarousel extends HTMLElement {
    constructor() {
      super();
      const $wrapper = this.querySelector(".wrapper");
      const $carousel = this.querySelector('.carousel');
      const firstCardWidth = $carousel.querySelector('li').offsetWidth;
      const $arrowButtons = this.querySelectorAll('.wrapper button');
      const carouselChildren = [...$carousel.children];
      let isDragging = false, startX, startScrollLeft;
      let cardPerView = Math.round($carousel.offsetWidth / firstCardWidth);

      carouselChildren.slice(-cardPerView).reverse().forEach((child) => {
        $carousel.insertAdjacentHTML('afterbegin', child.outerHTML);
      });

      carouselChildren.slice(0, cardPerView).forEach((child) => {
        $carousel.insertAdjacentHTML('beforeend', child.outerHTML);
      });

      $carousel.classList.add("no-transition");
      $carousel.scrollLeft = $carousel.offsetWidth;
      $carousel.classList.remove("no-transition");

      $arrowButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const isBack = e.currentTarget.classList.contains('back')
          $carousel.scrollLeft += isBack ? -firstCardWidth : firstCardWidth;
        })
      })

      const draggStart = (e) => {
        isDragging = true;
        $carousel.classList.add('dragging')
        startX = e.pageX;
        startScrollLeft = $carousel.scrollLeft;
      }

      const dragging = (e) => {
        if (!isDragging) return;
        $carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
      }
      
      const draggEnd = () => {
        isDragging = false;
        $carousel.classList.remove('dragging')
      }

      const InfiniteScroll = () => {
        if ($carousel.scrollLeft === 0) {
          $carousel.classList.add('no-transition');
          $carousel.scrollLeft = $carousel.scrollWidth - (2 * $carousel.offsetWidth);
          $carousel.classList.remove("no-transition");
        }
        // If the carousel is at the end, scroll to the beginning
        else if(Math.ceil($carousel.scrollLeft) === $carousel.scrollWidth - $carousel.offsetWidth) {
          $carousel.classList.add('no-transition');
          $carousel.scrollLeft = $carousel.offsetWidth;
          $carousel.classList.remove("no-transition");
        }
      }

      $carousel.addEventListener('mousedown', draggStart);
      $carousel.addEventListener('mousemove', dragging);
      document.addEventListener('mouseup', draggEnd);
      $carousel.addEventListener('scroll', InfiniteScroll);
    }
  }
  customElements.define('images-carousel', ImagesCarousel);
</script>