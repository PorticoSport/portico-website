---
export const prerender = true;
export const revalidate = 3600;

import Layout from "@/shared/layouts/Layout.astro";
import SectionContact from "@/shared/components/sections/SectionContact.astro";
import SectionInformation from "@/shared/components/sections/SectionInformation.astro";
import SectionCourtsGrid from "@/shared/components/sections/SectionCourtsGrid.astro";
import SizingSection from "@/shared/components/sections/SizingSection.astro";
import Typography from "@/shared/components/ui/Typography.astro";
import BenefitsSection from "@/shared/components/sections/BenefitsSection.astro";
import TurfSection from "@/shared/components/sections/TurfSection.astro";
import LightSection from "@/shared/components/sections/LightSection.astro";
import NormativeLogos from "@/shared/components/sections/NormativeLogos.astro";
import Breadcrumb from "@/shared/components/Breadcrumb.astro";
import Button from "@/shared/components/Button.astro";
import Section from "@/shared/components/Section.astro";
import Video from "@/shared/components/Video.astro";
import { getI18N, getCurrentLocale } from "@/shared/i18n";
import Gallery from "../Gallery.astro";
import { type Photo, type FeatureCourt, type FirstSectionCourt, type BenefitsSectionCourt, type SizingSectionCourt, type InformationSection, type InstallationSection, type CostSection, type ContactSection, type GallerySection } from "@/types/types";
import FeatureList from "@/shared/components/FeatureList.astro";
import { courtsGrid } from "@/shared/i18n/constants";
import SectionFaqs from "@/shared/components/sections/SectionFaqs.astro";

interface Props {
  language: string;
  video?: string;
  heroImage?: string;
  gallery: Photo[];
  court: "MOBILE_COURT" | "TOURNAMENT_COURT" | "PANORAMIC_FORCE_80_COURT" | "PANORAMIC_COURT" | "PANORAMIC_PLUS" | "CLUB_COURT" | "CLUB_PLUS" | "CLUB_FORCE_80_COURT" | "SINGLE_COURT" | "MINI_COURT";
}

const featureImages = [] as Photo[];
const { language, video, heroImage, court, gallery } = Astro.props;
console.log(language)
const i18n = getI18N({ language });
const currentLocale = getCurrentLocale({ language });
const locale = i18n.PAGES[court];
const isPaintSection = (locale as { PAINT_SECTION?: FeatureCourt }).PAINT_SECTION;
const isFirstSection = (locale as { FIRST_SECTION?: FirstSectionCourt }).FIRST_SECTION;
const isBenefitsSection = (locale as { BENEFITS_SECTION?: BenefitsSectionCourt }).BENEFITS_SECTION;
const isStructure = (locale as { STRUCTURE_SECTION?: InformationSection }).STRUCTURE_SECTION;
const isCourtsSizingSection = (locale as { SIZING_SECTION?: SizingSectionCourt }).SIZING_SECTION;
const isGlassSection = (locale as { GLASS_SECTION?: InformationSection }).GLASS_SECTION;
const isTurfSection = (locale as { TURF_SECTION?: InformationSection }).TURF_SECTION;
const isLightningSection = (locale as { LIGHTING_SECTION?: InformationSection }).LIGHTING_SECTION;
const isGallerySection = (locale as { GALLERY_SECTION?: GallerySection }).GALLERY_SECTION;
const isCourtsSection = (locale as { COURTS_SECTION?: string }).COURTS_SECTION;
const isContactSection = (locale as { CONTACT_SECTION?: ContactSection }).CONTACT_SECTION;
const isInstallationSection = (locale as { INSTALLATION_SECTION?: InstallationSection }).INSTALLATION_SECTION;
const isCostSection = (locale as { COST_SECTION?: CostSection }).COST_SECTION;
const faqItems = isInstallationSection ? [
  {
    question: isInstallationSection.SUBTITLE,
    answer: isInstallationSection.DESCRIPTION
  },
  {
    question: isInstallationSection.SUBTITLE_2,
    answer: isInstallationSection.DESCRIPTION_2
  },
  {
    question: isInstallationSection.SUBTITLE_3,
    answer: isInstallationSection.DESCRIPTION_3
  },
  {
    question: isInstallationSection.SUBTITLE_4,
    answer: isInstallationSection.DESCRIPTION_4
  }
] : [];

if (isPaintSection) {
  isPaintSection.IMAGES.forEach((image: Photo) => {
    featureImages.push({
      id: image.id,
      src: image.src,
      alt: image.alt,
    });
  });
}

const faqItemsShort = faqItems.slice(0, 3);
const title = i18n.PAGES[court].TITLE
const isMobile = title === i18n.PAGES.MOBILE_COURT.TITLE
const isPanoramic = title === i18n.PAGES.PANORAMIC_COURT.TITLE
const force80 = i18n.PAGES.PANORAMIC_FORCE_80_COURT.TITLE
const courts = courtsGrid(i18n);
const compatibleCourts = isMobile 
  ? courts.filter((item) => item.title !== title && item.title !== force80)
  : courts.filter((item) => item.title !== title && item.title !== i18n.PAGES.MOBILE_COURT.TITLE);

const faqToShow = isMobile ? faqItemsShort : faqItems;

interface Props {
  language: string;
  isFirstSection?: {
    TITLE: string;
    DESCRIPTION: string;
    IMAGES: {
      FRONT?: { src: string; alt: string };
      PERSPECTIVE?: { src: string; alt: string };
      TOP?: { src: string; alt: string };
    };
  };
}

// Contamos cuántas imágenes hay
const imageCount = [
  isFirstSection?.IMAGES.FRONT,
  isFirstSection?.IMAGES.PERSPECTIVE,
  isFirstSection?.IMAGES.TOP,
].filter(Boolean).length;

// Si hay 2 o menos imágenes => margen negativo (solo en pantallas grandes)
const logoMargin =
  imageCount <= 2
    ? "lg:-mt-[360px] md:-mt-[200px] -mt-[150px]" // más suave en pantallas pequeñas
    : "mt-0";

---

<Layout
  title={locale.SEO_TITLE}
  description={locale.SEO_DESCRIPTION}
  ogImage={locale.OG_IMG}
  currentLocale={currentLocale}
  language={language}
robots="index,follow"
  bgImage={heroImage}
>
  {
  video ? (
    <Video language={language} video={video} classVideo="cp-elipse relative overflow-hidden">
      <Section className="absolute z-10 inset-0 animate-fade-up flex flex-col justify-center items-center text-white px-4 text-center">
        <div className="flex flex-col gap-4 w-full max-w-[1400px] text-center">
          <header className="pt-8 md:pt-20">
            {locale.SUBTITLE && (
              <Typography
                tag="p"
                className="text-sm mb-0"
                type="primary"
                size="large"
                text={locale.SUBTITLE}
                responsive
              />
            )}
            <Typography
              tag="h1"
              type="secondary"
              className="uppercase mb-3 font-bold text-xl md:text-3xl"
              text={locale.DETAIL_TITLE || locale.TITLE}
              responsive
            />
          </header>

          {locale.DESCRIPTION && (
            <Typography
              tag="div"
              className="text-sm md:text-lg px-2 md:px-6 lg:px-16 xl:px-24"
              text={locale.DESCRIPTION}
              responsive
            />
          )}

          <Button
            target="_self"
            className="xl:hidden self-center mt-4 text-sm"
            url={`${locale.CONTACT_SECTION.BUTTON.URL}`}
          >
            {locale.CONTACT_BUTTON}
          </Button>
        </div>
      </Section>
    </Video>
  ) : null
}
  <main class="flex flex-col gradient-bg relative">
    <Breadcrumb
      crumbs={[
        { label: i18n.PAGES.HOME.ROUTE.BREADCRUMB, href: i18n.PAGES.HOME.ROUTE.URL },
        {
          label: locale.NAME,
          href: locale.ROUTE.URL,
        },
      ]}
    />
    {isFirstSection && (
  <Section heading2={isFirstSection.TITLE}>
    <Typography
      tag="div"
      className="text-center"
      text={isFirstSection.DESCRIPTION}
      responsive
    />

    <div
      class={`section-renders flex items-center gap-4 max-w-[1400px] my-16 mx-auto px-6 ${
        !isFirstSection.IMAGES.FRONT ? "justify-center" : ""
      }`}
    >
      {isFirstSection.IMAGES.FRONT && (
        <img
          src={isFirstSection.IMAGES.FRONT.src}
          alt={isFirstSection.IMAGES.FRONT.alt}
          class="front"
        />
      )}
      {isFirstSection.IMAGES.PERSPECTIVE && (
        <img
          src={isFirstSection.IMAGES.PERSPECTIVE.src}
          alt={isFirstSection.IMAGES.PERSPECTIVE.alt}
          class="perspective"
        />
      )}
      {isFirstSection.IMAGES.TOP && (
        <img
          src={isFirstSection.IMAGES.TOP.src}
          alt={isFirstSection.IMAGES.TOP.alt}
          class="top"
        />
      )}
    </div>
  </Section>
)}

<div class={logoMargin}>
  <NormativeLogos language={language} />
</div>
    <div class="bg-slate-100 w-full">
      {
      isBenefitsSection ? (
        <BenefitsSection
          title={isBenefitsSection.TITLE}
          Benefits={isBenefitsSection.BENEFITS}
        />
      ) : null
    }
    </div>
    {
      isStructure ? (
        <SectionInformation
          title={isStructure.TITLE}
          image={isStructure.IMAGE.src}
          subtitle={isStructure.SUBTITLE}
          text={isStructure.TEXT}
        />
      ) : null
    }
    {
      isCourtsSizingSection ? <SizingSection
        id={isCourtsSizingSection.ID}
        description={isCourtsSizingSection.DESCRIPTION}
        title={isCourtsSizingSection.TITLE}
        imageSizing={isCourtsSizingSection.IMAGE}
        outdoorText={isCourtsSizingSection.OUTDOOR}
        indoorText={isCourtsSizingSection.INDOOR}
        outdoorTitle={isCourtsSizingSection.OUTDOOR_TITLE}
        indoorTitle={isCourtsSizingSection.INDOOR_TITLE}
      /> : null
    }
    {
      isGlassSection ? <Section
        className="flex flex-col max-w-none p-0 lg:mb-0 border-b-4 border-white bg-slate-100"
        style="padding: 0; margin-left: 0; margin-right: 0;"
      >
        <div class="flex flex-col-reverse xl:flex-row max-w-none bg-gradient-to-b">
          <div class="w-full py-8 px-4 flex-1 md:px-8 text-black">
            <Typography tag="h2" className="mb-6 font-bold uppercase" text={isGlassSection.TITLE} responsive />
            <Typography tag="p" className="mb-4 font-thin" text={isGlassSection.SUBTITLE} responsive />
            <Typography tag="div" text={isGlassSection.DESCRIPTION} responsive />
          </div>
          <div class="relative w-full flex-1">
            <img
              loading="lazy"
              draggable={false}
              id={isGlassSection.IMAGE.id}
              src={isGlassSection.IMAGE.src}
              alt={isGlassSection.IMAGE.alt}
              class="relative object-cover w-full xl:max-w-[1024px] top-0 left-0 transition-opacity select-none pointer-events-none aspect-video xl:aspect-[16/14] xxl:aspect-[16/11] image-reverse"
            />
          </div>
        </div>
      </Section> : null
    }
    {
      isPaintSection ? (
        <Section className="flex flex-col max-w-none p-0 border-b-4 border-white" style="padding: 0; margin-left: 0; margin-right: 0;">
          <div class="flex flex-col xl:flex-row max-w-none">
            <div class="relative w-full flex-1">
              {
                featureImages.map((image, index) => (
                  <img
                    loading="lazy"
                    draggable={false}
                    id={image.id}
                    src={image.src}
                    alt={image.alt}
                    class={`${index === 0 ? "relative" : "absolute"} object-cover w-full xl:max-w-[1024px] top-0 left-0 transition-opacity select-none pointer-events-none image aspect-[16/11] ${index === 0 ? "opacity-100" : "opacity-0"}`}
                  />
                ))
              }
            </div>
            <div class="w-full py-8 px-4 md:px-8 xl:-ml-72 flex-1 z-10">
              <Typography tag="h2" className="mb-6 font-bold uppercase" text={isPaintSection.TITLE} responsive type="secondary"/>
              <Typography tag="div" className="mb-8" text={isPaintSection.DESCRIPTION} responsive />
              <FeatureList list={isPaintSection.LIST} />
              <Typography tag="div" className="mt-8" text={isPaintSection.DESCRIPTION_DOS} responsive />
            </div>
          </div>
        </Section>
      ) : null
    }
    <div class="bg-slate-100 text-black">
      {
      isTurfSection ? <TurfSection
        language={language}
        image={isTurfSection.IMAGE}
        subtitle={isTurfSection.SUBTITLE}
        title={isTurfSection.TITLE}
        description={isTurfSection.DESCRIPTION}
        list={isTurfSection.LIST}
        descriptionDos={isTurfSection.DESCRIPTION_DOS} /> : null
    }
    </div>
    {
      isLightningSection ? <LightSection
        title={isLightningSection.TITLE}
        subtitle={isLightningSection.SUBTITLE}
        list={isLightningSection.LIST}
        description={isLightningSection.DESCRIPTION}
        language={language}
      /> : null
    }
    <div class="w-full pt-28 bg-gradient-to-br from-[#315A75] via-[#151a36] to-[#151a36]">
      {court === "CLUB_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_COURT}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_COURT}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "MINI_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_MINI}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_MINI}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "SINGLE_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_SINGLE}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_SINGLE}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "CLUB_PLUS" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_PLUS}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_PLUS}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}
      
      {court === "CLUB_FORCE_80_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_CLUB_FORCE_80_COURT}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_CLUB_FORCE_80_COURT}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "PANORAMIC_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_PANORAMIC_COURT}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_PANORAMIC_COURT}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "PANORAMIC_PLUS" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_PANORAMIC_PLUS}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_PANORAMIC_PLUS}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}

      {court === "PANORAMIC_FORCE_80_COURT" && (
        <SectionFaqs
          items={i18n.PAGES.HOME.FAQS_SECTION.QUESTIONS_PANORAMIC_FORCE_80_COURT}
          title={i18n.PAGES.HOME.FAQS_SECTION.TITLE_PANORAMIC_FORCE_80_COURT}
          urlButton={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.URL}
          buttonTitle={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TITLE}
          urlText={i18n.PAGES.HOME.FAQS_SECTION.BUTTON.TEXT}
        />
      )}
    </div>
    {
      isGallerySection ? (<Gallery
        id={isGallerySection.ID}
        path={isGallerySection.PATH}
        offset={isGallerySection.OFFSET}
        photos={gallery}
        loadMoreText={isGallerySection.BUTTON_TEXT}
      />) : null
    }
    {
      isCourtsSection ? (<SectionCourtsGrid language={language} courts={compatibleCourts} heading={isCourtsSection.TITLE} subheading={isCourtsSection.DESCRIPTION} />) : null
    }
    {
      isContactSection ? (
        isContactSection.DESCRIPTION ? 
        <SectionContact
          hiddenSubject
          subject={isContactSection.SUBJECT}
          language={language}
          bgImage={isContactSection.BG_IMAGE}
          image={isContactSection.IMAGE}
          description={isContactSection.DESCRIPTION}
        /> : 
        <SectionContact
          hiddenSubject
          subject={isContactSection.SUBJECT}
          language={language}
          bgImage={isContactSection.BG_IMAGE}
          image={isContactSection.IMAGE}
        />
      ) : null
    }
    
  </main>
</Layout>

<style>

  .section-renders {
    display: grid;
    grid-template-rows: repeat(2, 1fr);
    grid-template-columns: repeat(2, minmax(150px, 1fr));
  }
  
  .front {
    grid-column: 1 / -1;
  }
  
  .section-renders img {
    transition: filter 0.3s ease-in-out;
  }

  .section-renders img:hover {
    filter: drop-shadow(1px 1px 10px rgb(183 228 253));
  }

  @media (min-width: 1280px) {
    .image {
      -webkit-mask: linear-gradient(
        90deg,
        transparent,
        white 0,
        white 30%,
        transparent
      );
      mask: linear-gradient(
        90deg,
        transparent,
        white 0,
        white 30%,
        transparent
      );
    }

    .image-reverse {
      -webkit-mask: linear-gradient(
        -90deg,
        transparent,
        white 0,
        white 30%,
        transparent
      );
      mask: linear-gradient(
        -90deg,
        transparent,
        white 0,
        white 30%,
        transparent
      );
    }
  }
</style>

<script is:inline define:vars={{ featureImages }}>
  const updateFeatureImages = (featureImages) => {
    // cambiar a la siguiente imagen cada 3 segundos

    let index = 0;
    setInterval(() => {
      const currentImage = featureImages[index];
      const nextImage = featureImages[index + 1] || featureImages[0];

      const currentImageElement = document.getElementById(currentImage.id);
      const nextImageElement = document.getElementById(nextImage.id);

      if (currentImageElement && nextImageElement) {
        currentImageElement.classList.remove("opacity-100");
        currentImageElement.classList.add("opacity-0");
        nextImageElement.classList.remove("opacity-0");
        nextImageElement.classList.add("opacity-100");
      }

      index = index + 1;
      if (index === featureImages.length) index = 0;
    }, 3000);
  };

  featureImages.length && updateFeatureImages(featureImages);
</script>
