---
import Typography from './Typography.astro'

interface Props {
  items: {
    question: string
    answer: string
  }[]
  dark?: boolean
}

const { items, dark = false } = Astro.props
const textClass = dark ? "text-black" : "text-primary"
---

<div class="accordion scale-[85%]">
  {
    items.map(({ question, answer }, index) => (
      <div class="border-b border-primary" key={index}>
        <button
          class="relative bg-transparent cursor-pointer hover:text-secondary focus:text-secondary block text-left w-full py-4 px-0 text-xl"
          aria-expanded="false"
        >
          <Typography
            tag="h3"
            size="small"
            responsive
            text={question}
            className={`${textClass}`}
          />
          <span class="icon" aria-hidden="true"></span>
        </button>
        <div class="accordion-content">
          <Typography
            tag="p"
            size="small"
            responsive
            text={answer}
            className={`text-left ${textClass}`}
          />
        </div>
      </div>
    ))
  }
</div>

<style>
  .icon {
    display: inline-block;
    position: absolute;
    top: 18px;
    right: 0;
    width: 22px;
    height: 22px;
    border: 1px solid;
    border-radius: 22px;
  }
  .icon::before {
    display: block;
    position: absolute;
    content: '';
    top: 9px;
    left: 5px;
    width: 10px;
    height: 2px;
    background: currentColor;
  }
  .icon::after {
    display: block;
    position: absolute;
    content: '';
    top: 5px;
    left: 9px;
    width: 2px;
    height: 10px;
    background: currentColor;
  }

  .accordion-content {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    transition: opacity 200ms linear, max-height 200ms linear;
    will-change: opacity, max-height;
  }

  button[aria-expanded='true'] + .accordion-content {
    opacity: 1;
    max-height: 9em;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const items = document.querySelectorAll(".accordion button");
    function toggleAccordion() {
      const itemToggle = this.getAttribute('aria-expanded');
      items.forEach(item => item.setAttribute('aria-expanded', 'false'));

      if (itemToggle === 'false') {
        this.setAttribute('aria-expanded', 'true');
      }
    }

    items.forEach(item => item.addEventListener('click', toggleAccordion));
  });
</script>
