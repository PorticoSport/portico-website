---
import { type TypograghyTags, type TypographyTypes } from "@/types/types.ts";

const TYPES = {
  current: "text-current",
  primary: "text-primary",
  secondary: "text-secondary",
} as TypographyTypes;

interface Props {
  tag?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span"| "div";
  type?: "current" | "primary" | "secondary";
  size?: "small" | "medium" | "large";
  text?: string;
  className?: string;
  responsive?: boolean;
  customSize?: string;
}

const TAGS = {
  h1: {
    size: {
      small: {
        base: "text-4xl",
        responsive: "text-2xl md:text-3xl lg:text-4xl"
      },
      medium: {
        base: "text-5xl",
        responsive: "text-3xl md:text-4xl lg:text-5xl"
      },
      large: {
        base: "text-6xl",
        responsive: "text-4xl md:text-5xl lg:text-6xl"
      },
    },
    extra: "text-balance tracking-wide"
  },
  h2: {
    size: {
      small: {
        base: "text-3xl",
        responsive: "text-xl md:text-2xl lg:text-3xl"
      },
      medium: {
        base: "text-4xl",
        responsive: "text-2xl md:text-3xl lg:text-4xl"
      },
      large: {
        base: "text-5xl",
        responsive: "text-3xl md:text-4xl lg:text-5xl"
      },
    },
    extra: "text-balance tracking-wide"
  },
  h3: {
    size: {
      small: {
        base: "text-2xl",
        responsive: "text-lg md:text-xl lg:text-2xl"
      },
      medium: {
        base: "text-3xl",
        responsive: "text-xl md:text-2xl lg:text-3xl"
      },
      large: {
        base: "text-4xl",
        responsive: "text-2xl md:text-3xl lg:text-4xl"
      }
    },
    extra: "text-balance thin"
  },
  h4: {
    size: {
      small: {
        base: "text-xl",
        responsive: "text-base md:text-lg lg:text-xl"
      },
      medium: {
        base: "text-2xl",
        responsive: "text-lg md:text-xl lg:text-2xl"
      },
      large: {
        base: "text-3xl",
        responsive: "text-xl md:text-2xl lg:text-3xl"
      },
    },
    extra: "text-balance"
  },
  h5: {
    size: {
      small: {
        base: "text-lg",
        responsive: "text-sm md:text-base lg:text-lg"
      },
      medium: {
        base: "text-xl",
        responsive: "text-base md:text-lg lg:text-xl"
      },
      large: {
        base: "text-2xl",
        responsive: "text-lg md:text-xl lg:text-2xl"
      },
    },
    extra: "text-balance"
  },
  h6: {
    size: {
      small: {
        base: "text-base",
        responsive: "text-xs md:text-sm lg:text-base"
      },
      medium: {
        base: "text-lg",
        responsive: "text-sm md:text-base lg:text-lg"
      },
      large: {
        base: "text-xl",
        responsive: "text-base md:text-lg lg:text-xl"
      },
    },
    extra: "text-balance"
  },
  p: {
    size: {
     small: {
        base: "text-base",
        responsive: "text-xs md:text-sm lg:text-base"
      },
      medium: {
        base: "text-lg",
        responsive: "text-sm md:text-base lg:text-lg"
      },
      large: {
        base: "text-xl",
        responsive: "text-md md:text-lg lg:text-xl"
      },
    },
    extra: "text-pretty font-thin"
  },
  span: {
    size: {
       small: {
        base: "text-base",
        responsive: "text-xs md:text-sm lg:text-base"
      },
      medium: {
        base: "text-lg",
        responsive: "text-sm md:text-base lg:text-lg"
      },
      large: {
        base: "text-xl",
        responsive: "text-md md:text-lg lg:text-xl"
      },
    },
    extra: "text-pretty font-thin"
  },
  div: {
    size: {
       small: {
        base: "text-base",
        responsive: "text-xs md:text-sm lg:text-base"
      },
      medium: {
        base: "text-lg",
        responsive: "text-sm md:text-base lg:text-lg"
      },
      large: {
        base: "text-xl",
        responsive: "text-md md:text-lg lg:text-xl"
      },
    },
    extra: "text-pretty font-thin"
  },
} as TypograghyTags;

const { tag = "p", text, type = "current", size = "medium", className = "", responsive = false, customSize } = Astro.props;
const sizing = responsive ? TAGS[tag].size[size].responsive : TAGS[tag].size[size].base;
const processedSize = customSize ? customSize : sizing;
const classes = `${processedSize} ${TAGS[tag].extra} ${TYPES[type]} ${className}`;
---

{
  tag === "h1" && (
    <h1 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h1>
  )
}
{
  tag === "h2" && (
    <h2 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h2>
  )
}
{
  tag === "h3" && (
    <h3 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h3>
  )
}
{
  tag === "h4" && (
    <h4 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h4>
  )
}
{
  tag === "h5" && (
    <h5 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h5>
  )
}
{
  tag === "h6" && (
    <h6 class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </h6>
  )
}
{
  tag === "p" && (
    <p class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </p>
  )
}
{
  tag === "span" && (
    <span class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </span>
  )
}
{
  tag === "div" && (
    <div class={`${classes}`} set:html={text}>
      {!text && <slot>{text}</slot>}
    </div>
  )
}


